{% extends "basetimeline.jinja2" %}

{% block content %}

    <!-- Contents -->

    <div class="timeline">
        <div class="container left" id="toggle1">
            <div class="content">
                <h2>Step 1: Program Downloads</h2>
                <p> Get ready to download Python, Pycharm, Github Desktop, Anaconda and Arduino IDE</p>
                <div id="toggle_value1">
                    <p>Python 3 is available at python.org. For this project we used the 64-bit Windows version.
                        Pycharm is an IDE (Integrated Development Environment). There are other IDE's out there like Atom and Sublime
                        which can be used but if you want follow along this tutorial it would be best to use Pycharm.</p>
                    <p> Github Desktop assists with the project workflow. Being Part of a Team that is developing
                        code on the same file GitHub Desktop is crucial to our progress. Understand the workings of Github and it
                        will pay dividens later.</p>
                    <p>Anaconda is a virtual environment that was developed for solo practitioners to use open-source packages and
                    libraries on a single machine.</p>
                    <p>Arduino IDE is used to develop code in C. The Arduino IDE has so many example libraries
                        and example code. It truly is a beginners friend to learning C code.</p>
                    <p></p>
                    <p>Useful Links:</p>
                    <p class="nav-item"><a class="nav-link" href="https://www.python.org/">Python</a></p>
                    <p class="nav-item"><a class="nav-link" href="https://www.jetbrains.com/pycharm/">Pycharm IDE</a></p>
                    <p class="nav-item"><a class="nav-link" href="https://desktop.github.com/">Github Desktop</a></p>
                    <p class="nav-item"><a class="nav-link" href="https://www.anaconda.com/products/individual">Anaconda</a></p>
                    <p class="nav-item"><a class="nav-link" href="https://www.arduino.cc/en/software">Arduino IDE</a></p>
                </div>
            </div>
        </div>

        <div class="container right" id="toggle2">
            <div class="content">
                <h2 id="toggle2">Step 2: Hardware</h2>
                <p> Getting hands on with the Arduino UNO and sensors</p>
                <div id="toggle_value2">
                    <p>The Arduino UNO is an often used microcontroller for hobbyist. It's well documented and easy to use.
                        There is almost an endless supply of resources on line. Which is great because this makes our lives easier!
                        Why reinvent the wheel if you don't have to?! For this project we used the UNO R3 Project Kit. The kit includes
                        the Arduino R3 micro controller and an assortment of sensors.</p>
                    <p>Sensors used in the kewl bus include the DHT11 humidity and temperature sensor and Ultrasonic Sensor (HC-SR04).
                        Also used is the Passive Buzzer and Servo Motor SG90. All are contained in the project kit.</p>
                    <p></p>
                    <p>Useful Links:</p>
                    <p class="nav-item"><a class="nav-link" href="https://www.amazon.com/EL-KIT-001-Project-Complete-Starter-Tutorial/dp/B01CZTLHGE/ref=asc_df_B01CZTLHGE/?tag=hyprod-20&linkCode=df0&hvadid=241907595991&hvpos=&hvnetw=g&hvrand=5259736415560937031&hvpone=&hvptwo=&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=9007937&hvtargid=pla-464156272733&psc=1">Arduino UNO R3 Starter Kit</a></p>
                </div>
            </div>
        </div>

        <div class="container left" id="toggle3">
            <div class="content">
                <h2>Step 3: Arduino Code</h2>
                <p> Becoming familiar with the Arduino.</p>
                <div id="toggle_value3">
                    <p>I can only be so eloquent with describing the arduino code that was used. A link is provided with commented code.
                        I will mention that we do use "switch case" instead of a heap of if else statements in order to
                        utilize all the sensors and motors.
                    </p>
                    <p>There is also a link to C programing pdf. On chapter 17 there is a great break down on how to use the switch
                        statement in C. </p>
                    <p></p>
                    <p>Useful Links:</p>
                    <p class="nav-item"><a class="nav-link" href="/arduino_code_static">Arduino Code</a></p>
                    <p class="nav-item"><a class="nav-link" href="https://sjceodisha.in/wp-content/uploads/2019/09/C-Programming-Absolute-Beginner-ssp.indian@gmail.com_.pdf">Switch Case Reference</a></p>
                </div>

            </div>
        </div>

        <div class="container right" id="toggle4">
            <div class="content">
                <h2>Step 4: Serial Communications</h2>
                <p> Lets talk 1's and 0's</p>
                <div id="toggle_value4">
                    <p>In order to do serial communication with Python we have to go through a protocol stack. Meaning,
                        the objects can not be sent directly from the Arduino to Python and instead must be manipulated from
                        the object to 1's and 0's, then sent to python where it is reverse manipulated back to the objects original form.</p>
                    <p></p>
                    <div class="card">
                        <div class="card-title text-center font-weight-bold">Protocol Stack</div>
                        <div class="card-body">
                            <img class="card-img-top" src="/static/images/Protocol_Stack.PNG" alt="Protocol Stack">
                        </div>
                    </div>
                    <p></p>
                    <p>It is important to note that Serial Communication works well for point-to-point communication over a
                        short distance. Basically how much wire you have available. For longer distances we must extend our network!</p>
                    <p>Helpful code for Serial Communications can be found below. Professor Donnal has so graciously posted
                        material on his Github.</p>
                    <p></p>
                    <p>Useful Links:</p>
                    <p class="nav-item"><a class="nav-link" href="https://git.wattsworth.net/jdonnal/comms_demo">Donnal Serial</a></p>
                </div>
            </div>
        </div>

        <div class="container left" id="toggle5">
            <div class="content">
                <h2 id="toggle5">Step 5: Flask (Web Frame Work)</h2>
                <p> Breaking ground and starting web development</p>
                <div id="toggle_value5">
                    <p>Flask is a well documented web frame work available for Python. Why reinvent the wheel
                        am I right?</p>
                    <p></p>
                    <p>Useful Links:</p>
                    <p class="nav-item"><a class="nav-link" href="https://flask.palletsprojects.com/en/1.1.x/">Flask Documentation</a></p>
                    <p class="nav-item"><a class="nav-link" href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world">Flask Tutorial</a></p>
                </div>
            </div>
        </div>

        <div class="container right" id="toggle6">
            <div class="content">
                <h2>Step 6: Creating a Static Site</h2>
                <p>Let's have some fun with CSS,Bootstrap and Fontawesome</p>
                <div id="toggle_value6">
                    <p></p>
                    <p></p>
                    <p></p>
                    <p></p>
                    <p></p>
                    <p>Useful Links:</p>
                    <p class="nav-item"><a class="nav-link" href="https://getbootstrap.com/docs/5.0/getting-started/introduction/">BootStrap</a></p>
                    <p class="nav-item"><a class="nav-link" href="https://fontawesome.com/how-to-use/on-the-web/referencing-icons/basic-use">Font Awesome</a></p>
                </div>
            </div>
        </div>

        <div class="container left" id="toggle7">
            <div class="content">
                <h2 id="toggle7">Step 7: Learn JavaScript!</h2>
                <p> Jquery is a great place to start learning how to code JavaScript</p>
                <div id="toggle_value7">
                    <p>jQuery is a JavaScript library designed to simplify HTML DOM tree traversal and manipulation, as
                        well as event handling, CSS animation, and Ajax. It is free, open-source software using the
                        permissive MIT License. </p>
                    <p></p>
                    <p>Useful Links:</p>
                    <p class="nav-item"><a class="nav-link" href="https://www.w3schools.com/jquery/default.asp">Jquery W3schools</a></p>
                </div>
            </div>
        </div>

        <div class="container right" id="toggle8">
            <div class="content">
                <h2>Step 8: Async with AIOHTTP</h2>
                <p>Multi-threading is the bane of existence</p>
                <div id="toggle_value8">
                    <p>Asynchronous or async is better</p>
                    <p> We're only at the tip of the ASYNC iceberg.</p>
                </div>
            </div>
        </div>

        <div class="container left" id="toggle9">
            <div class="content">
                <h2>Step 9: Adding a Database!</h2>
                <p> Using SQLite make the website be useful </p>
                <div id="toggle_value9">
                    <p>The SQL language (Structured Query Language) or "sequel" is language designed to communicate with
                        databases. All a data base is a structured way of storing data. For all intensive purposes you could
                        create a data base inside a flat .txt file. The problem arises when you want to access the data or manipulate it. Some sort of sorting
                        algorithm would be required to access the particular bit of data that we want.</p>
                    <p>SQLite is a stripped down implementation. So it works great for us because we are a small website and don't
                        need much.</p>
                    <p>Before going on to the next step here's a joke for you. A SQL Query walks up to two tables and says...mind if I join you?</p>
                    <p>Useful Links:</p>
                    <p></p>
                    <p class="nav-item"><a class="nav-link" href="https://sqlitebrowser.org/dl/">SQLite DB Browser</a></p>
                </div>
            </div>
        </div>

        <div class="container right" id="toggle10">
            <div class="content">
                <h2>Step 10: Add a Plot</h2>
                <p> Use Flot to create plots on Python </p>
                <div id="toggle_value10">
                    <p></p>
                    <p></p>
                    <p></p>
                    <p>Useful Links:</p>
                    <p></p>
                    <p class="nav-item"><a class="nav-link" href="">Site</a></p>
                </div>
            </div>
        </div>

        <div class="container left" id="toggle11">
            <div class="content">
                <h2>Step 11: Deploying the Website</h2>
                <p> Taking the internet by storm. Prepare to deploy Website!</p>
                <div id="toggle_value11">
                    <p>While we had a script capable of running both the serial connections and
                        the website, we were doing it off an academy laptop with no public ip address. Other mids could check out
                        our site, the world at large couldn't, so we began hosting on an AWS server. However, the aws server has no connection to our
                        serial ports or devices. So, any and all functions that required serial use were made to send a request to a specific port.
                        When the amazon server goes to process these requests, it recognizes the port, and instead of executing them itself, has
                        our midn laptop, connected to the arduino and ssh'd to the aws server execute the commands, and pass the response back. We run a
                        api server on the mission network, and an actual hosting server on the public internet to allow you access to our site!</p>
                </div>
            </div>
        </div>

        <div class="container right" id="toggle12">
            <div class="content">
                <h2>Step 12: Create our own API</h2>
                <p> Ever heard of Reverse Tunneling?</p>
                <div id="toggle_value12">
                    <p></p>
                    <p></p>
                    <p></p>
                    <p>Useful Links:</p>
                    <p></p>
                    <p class="nav-item"><a class="nav-link" href="">Site</a></p>
                </div>
            </div>
        </div>

        <div class="container left" id="toggle13">
            <div class="content">
                <h2>Step 13: Create a Proxy</h2>
                <p> Having a proxy adds security to the site </p>
                <div id="toggle_value13">
                    <p>Proxies are used for security purposes. They are a gateway between us and the internet. Proxy
                        servers act as a firewall and web filter, provide shared network connections, and cache data to
                        speed up common requests. A good proxy server keeps users and the internal network protected from
                        the bad stuff that lives out in the wild internet. With out a proxy we would be susceptible to a
                        http attack (A type of Distributed Denial of service attack).</p>
                    <p>We are using NGINX for our proxy. There is a free open source version that is available. Big companies
                        like Starbucks, Bank of America, American Express, and Capital One use NGINX as a proxy server.</p>
                    <p></p>
                    <p>Useful Links:</p>
                    <p></p>
                    <p class="nav-item"><a class="nav-link" href="https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-open-source/?_ga=2.150704758.1771187416.1616107733-2037060056.1616107733">nginx</a></p>
                </div>
            </div>
        </div>

        <div class="container right" id="toggle14">
            <div class="content">
                <h2>Step 14: Secure the site</h2>
                <p>Secure site by getting it on port 443 with HTTPS</p>
                <div id="toggle_value14">
                    <p>Certbot walks you through how to get your site onto HTTPS depending on what your site is running on.
                        Our site is running Nginx on Ubuntu 18.04</p>
                    <p>Certificates use to cost hundreds of dollars a month and required you to send in a driver's license.
                        Now its all free and it can be done all online.</p>
                    <p></p>
                    <p>Useful Links:</p>
                    <p></p>
                    <p class="nav-item"><a class="nav-link" href="https://certbot.eff.org/lets-encrypt/ubuntubionic-nginx">certbot</a></p>
                </div>
            </div>
        </div>

        <div class="container left" id="toggle15">
            <div class="content">
                <h2>Step 15: Back to Hardware</h2>
                <p> Create PCB to clean up hardware</p>
                <div id="toggle_value15">
                    <p>Eagle is a EDA (Electronic Design Automation) software that makes designing and making a PCB (Printed Circuit Board)
                        an easy process.</p>
                    <p></p>
                    <p></p>
                    <p>Useful Links:</p>
                    <p></p>
                    <p class="nav-item"><a class="nav-link" href="https://learn.sparkfun.com/tutorials/using-eagle-schematic/all">Eagle tutorial</a></p>
                    <p class="nav-item"><a class="nav-link" href="https://www.autodesk.com/products/eagle/free-download?plc=F360&term=1-YEAR&support=ADVANCED&quantity=1">Eagle free download</a></p>
                </div>
            </div>
        </div>

        <div class="container right" id="toggle16">
            <div class="content">
                <h2>Step 16: It's Raspberry Pi Time </h2>
                <p>Getting the Raspberry Pi set up and downloading openCV</p>
                <div id="toggle_value16">
                    <p>In order to use the Raspberry Pi we used Real VNC. A VNC (Virtual Network Computing) is a type of remote-control
                        software that makes it possible to control another computer over a network connection. We use this because the RasPi doesn't have a
                        screen or keyboard to interface with.</p>
                    <p>OpenCV (Open Source Computer Vision Library) is an open source computer vision and machine learning software library.</p>
                    <p></p>
                    <p>Useful Links:</p>
                    <p></p>
                    <p class="nav-item"><a class="nav-link" href="https://www.realvnc.com/en/connect/download/viewer/">Real VNC</a></p>
                    <p class="nav-item"><a class="nav-link" href="https://searchnetworking.techtarget.com/definition/virtual-network-computing#:~:text=Virtual%20network%20computing%20(VNC)%20is,computer%20over%20a%20network%20connection.&text=The%20server%20transmits%20a%20duplicate,display%20screen%20to%20the%20viewer.">What is a VNC?</a></p>
                    <p class="nav-item"><a class="nav-link" href="https://opencv.org/about/">OpenCV Documentation</a></p>
                </div>
            </div>
        </div>

    </div>

{% endblock %}